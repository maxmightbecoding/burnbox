// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node.proto

#ifndef PROTOBUF_node_2eproto__INCLUDED
#define PROTOBUF_node_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_node_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsNodeImpl();
void InitDefaultsNode();
void InitDefaultsNodeListImpl();
void InitDefaultsNodeList();
inline void InitDefaults() {
  InitDefaultsNode();
  InitDefaultsNodeList();
}
}  // namespace protobuf_node_2eproto
class Node;
class NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class NodeList;
class NodeListDefaultTypeInternal;
extern NodeListDefaultTypeInternal _NodeList_default_instance_;

// ===================================================================

class Node : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Node) */ {
 public:
  Node();
  virtual ~Node();

  Node(const Node& from);

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Node* other);
  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Node* New() const PROTOBUF_FINAL { return New(NULL); }

  Node* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Node& from);
  void MergeFrom(const Node& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Node* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes enc_key = 1;
  bool has_enc_key() const;
  void clear_enc_key();
  static const int kEncKeyFieldNumber = 1;
  const ::std::string& enc_key() const;
  void set_enc_key(const ::std::string& value);
  #if LANG_CXX11
  void set_enc_key(::std::string&& value);
  #endif
  void set_enc_key(const char* value);
  void set_enc_key(const void* value, size_t size);
  ::std::string* mutable_enc_key();
  ::std::string* release_enc_key();
  void set_allocated_enc_key(::std::string* enc_key);

  // optional int32 id = 2;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional int32 left_child = 3;
  bool has_left_child() const;
  void clear_left_child();
  static const int kLeftChildFieldNumber = 3;
  ::google::protobuf::int32 left_child() const;
  void set_left_child(::google::protobuf::int32 value);

  // optional int32 right_child = 4;
  bool has_right_child() const;
  void clear_right_child();
  static const int kRightChildFieldNumber = 4;
  ::google::protobuf::int32 right_child() const;
  void set_right_child(::google::protobuf::int32 value);

  // required bool taken = 5;
  bool has_taken() const;
  void clear_taken();
  static const int kTakenFieldNumber = 5;
  bool taken() const;
  void set_taken(bool value);

  // required bool isleaf = 6;
  bool has_isleaf() const;
  void clear_isleaf();
  static const int kIsleafFieldNumber = 6;
  bool isleaf() const;
  void set_isleaf(bool value);

  // @@protoc_insertion_point(class_scope:Node)
 private:
  void set_has_enc_key();
  void clear_has_enc_key();
  void set_has_id();
  void clear_has_id();
  void set_has_left_child();
  void clear_has_left_child();
  void set_has_right_child();
  void clear_has_right_child();
  void set_has_taken();
  void clear_has_taken();
  void set_has_isleaf();
  void clear_has_isleaf();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr enc_key_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 left_child_;
  ::google::protobuf::int32 right_child_;
  bool taken_;
  bool isleaf_;
  friend struct ::protobuf_node_2eproto::TableStruct;
  friend void ::protobuf_node_2eproto::InitDefaultsNodeImpl();
};
// -------------------------------------------------------------------

class NodeList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:NodeList) */ {
 public:
  NodeList();
  virtual ~NodeList();

  NodeList(const NodeList& from);

  inline NodeList& operator=(const NodeList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeList(NodeList&& from) noexcept
    : NodeList() {
    *this = ::std::move(from);
  }

  inline NodeList& operator=(NodeList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeList* internal_default_instance() {
    return reinterpret_cast<const NodeList*>(
               &_NodeList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(NodeList* other);
  friend void swap(NodeList& a, NodeList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeList* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeList& from);
  void MergeFrom(const NodeList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Node node = 1;
  int node_size() const;
  void clear_node();
  static const int kNodeFieldNumber = 1;
  const ::Node& node(int index) const;
  ::Node* mutable_node(int index);
  ::Node* add_node();
  ::google::protobuf::RepeatedPtrField< ::Node >*
      mutable_node();
  const ::google::protobuf::RepeatedPtrField< ::Node >&
      node() const;

  // required int32 root = 2;
  bool has_root() const;
  void clear_root();
  static const int kRootFieldNumber = 2;
  ::google::protobuf::int32 root() const;
  void set_root(::google::protobuf::int32 value);

  // required int32 height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // required int32 files = 4;
  bool has_files() const;
  void clear_files();
  static const int kFilesFieldNumber = 4;
  ::google::protobuf::int32 files() const;
  void set_files(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NodeList)
 private:
  void set_has_root();
  void clear_has_root();
  void set_has_height();
  void clear_has_height();
  void set_has_files();
  void clear_has_files();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Node > node_;
  ::google::protobuf::int32 root_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 files_;
  friend struct ::protobuf_node_2eproto::TableStruct;
  friend void ::protobuf_node_2eproto::InitDefaultsNodeListImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Node

// required bytes enc_key = 1;
inline bool Node::has_enc_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Node::set_has_enc_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Node::clear_has_enc_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Node::clear_enc_key() {
  enc_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_enc_key();
}
inline const ::std::string& Node::enc_key() const {
  // @@protoc_insertion_point(field_get:Node.enc_key)
  return enc_key_.GetNoArena();
}
inline void Node::set_enc_key(const ::std::string& value) {
  set_has_enc_key();
  enc_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Node.enc_key)
}
#if LANG_CXX11
inline void Node::set_enc_key(::std::string&& value) {
  set_has_enc_key();
  enc_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Node.enc_key)
}
#endif
inline void Node::set_enc_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_enc_key();
  enc_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Node.enc_key)
}
inline void Node::set_enc_key(const void* value, size_t size) {
  set_has_enc_key();
  enc_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Node.enc_key)
}
inline ::std::string* Node::mutable_enc_key() {
  set_has_enc_key();
  // @@protoc_insertion_point(field_mutable:Node.enc_key)
  return enc_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Node::release_enc_key() {
  // @@protoc_insertion_point(field_release:Node.enc_key)
  clear_has_enc_key();
  return enc_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Node::set_allocated_enc_key(::std::string* enc_key) {
  if (enc_key != NULL) {
    set_has_enc_key();
  } else {
    clear_has_enc_key();
  }
  enc_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), enc_key);
  // @@protoc_insertion_point(field_set_allocated:Node.enc_key)
}

// optional int32 id = 2;
inline bool Node::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Node::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Node::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Node::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Node::id() const {
  // @@protoc_insertion_point(field_get:Node.id)
  return id_;
}
inline void Node::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:Node.id)
}

// optional int32 left_child = 3;
inline bool Node::has_left_child() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Node::set_has_left_child() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Node::clear_has_left_child() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Node::clear_left_child() {
  left_child_ = 0;
  clear_has_left_child();
}
inline ::google::protobuf::int32 Node::left_child() const {
  // @@protoc_insertion_point(field_get:Node.left_child)
  return left_child_;
}
inline void Node::set_left_child(::google::protobuf::int32 value) {
  set_has_left_child();
  left_child_ = value;
  // @@protoc_insertion_point(field_set:Node.left_child)
}

// optional int32 right_child = 4;
inline bool Node::has_right_child() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Node::set_has_right_child() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Node::clear_has_right_child() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Node::clear_right_child() {
  right_child_ = 0;
  clear_has_right_child();
}
inline ::google::protobuf::int32 Node::right_child() const {
  // @@protoc_insertion_point(field_get:Node.right_child)
  return right_child_;
}
inline void Node::set_right_child(::google::protobuf::int32 value) {
  set_has_right_child();
  right_child_ = value;
  // @@protoc_insertion_point(field_set:Node.right_child)
}

// required bool taken = 5;
inline bool Node::has_taken() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Node::set_has_taken() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Node::clear_has_taken() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Node::clear_taken() {
  taken_ = false;
  clear_has_taken();
}
inline bool Node::taken() const {
  // @@protoc_insertion_point(field_get:Node.taken)
  return taken_;
}
inline void Node::set_taken(bool value) {
  set_has_taken();
  taken_ = value;
  // @@protoc_insertion_point(field_set:Node.taken)
}

// required bool isleaf = 6;
inline bool Node::has_isleaf() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Node::set_has_isleaf() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Node::clear_has_isleaf() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Node::clear_isleaf() {
  isleaf_ = false;
  clear_has_isleaf();
}
inline bool Node::isleaf() const {
  // @@protoc_insertion_point(field_get:Node.isleaf)
  return isleaf_;
}
inline void Node::set_isleaf(bool value) {
  set_has_isleaf();
  isleaf_ = value;
  // @@protoc_insertion_point(field_set:Node.isleaf)
}

// -------------------------------------------------------------------

// NodeList

// repeated .Node node = 1;
inline int NodeList::node_size() const {
  return node_.size();
}
inline void NodeList::clear_node() {
  node_.Clear();
}
inline const ::Node& NodeList::node(int index) const {
  // @@protoc_insertion_point(field_get:NodeList.node)
  return node_.Get(index);
}
inline ::Node* NodeList::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:NodeList.node)
  return node_.Mutable(index);
}
inline ::Node* NodeList::add_node() {
  // @@protoc_insertion_point(field_add:NodeList.node)
  return node_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Node >*
NodeList::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:NodeList.node)
  return &node_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Node >&
NodeList::node() const {
  // @@protoc_insertion_point(field_list:NodeList.node)
  return node_;
}

// required int32 root = 2;
inline bool NodeList::has_root() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeList::set_has_root() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeList::clear_has_root() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeList::clear_root() {
  root_ = 0;
  clear_has_root();
}
inline ::google::protobuf::int32 NodeList::root() const {
  // @@protoc_insertion_point(field_get:NodeList.root)
  return root_;
}
inline void NodeList::set_root(::google::protobuf::int32 value) {
  set_has_root();
  root_ = value;
  // @@protoc_insertion_point(field_set:NodeList.root)
}

// required int32 height = 3;
inline bool NodeList::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeList::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeList::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeList::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 NodeList::height() const {
  // @@protoc_insertion_point(field_get:NodeList.height)
  return height_;
}
inline void NodeList::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:NodeList.height)
}

// required int32 files = 4;
inline bool NodeList::has_files() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeList::set_has_files() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeList::clear_has_files() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeList::clear_files() {
  files_ = 0;
  clear_has_files();
}
inline ::google::protobuf::int32 NodeList::files() const {
  // @@protoc_insertion_point(field_get:NodeList.files)
  return files_;
}
inline void NodeList::set_files(::google::protobuf::int32 value) {
  set_has_files();
  files_ = value;
  // @@protoc_insertion_point(field_set:NodeList.files)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_node_2eproto__INCLUDED
